<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Copyright (c) 2004 on behalf of the EU EGEE Project: 
	The European Organization for Nuclear Research (CERN), 
	Istituto Nazionale di Fisica Nucleare (INFN), Italy
	Datamat Spa, Italy
	Centre National de la Recherche Scientifique (CNRS), France
	CS Systeme d'Information (CSSI), France
	Royal Institute of Technology, Center for Parallel Computers (KTH-PDC), Sweden
	Universiteit van Amsterdam (UvA), Netherlands
	University of Helsinki (UH.HIP), Finland
	University of Bergen (UiB), Norway
	Council for the Central Laboratory of the Research Councils (CCLRC), United Kingdom

	Build file for the GLite Middleware Loggin and Bookkeeping Subsystem
	
	Authors: Ales Krenek <ljocha@ics.muni.cz>
	Version info: $Id$
	Release: $Name$

	Revision history:
	$Log$
	Revision 1.22  2004/10/26 13:11:13  dimeglio
	Added dependency of clean on envchecks
	
	Revision 1.21  2004/10/25 20:57:38  dimeglio
	Use antExec
	
	Revision 1.20  2004/10/21 10:37:48  akrenek
	make server depend on logger due to notification interlogger
	
	Revision 1.19  2004/10/15 12:30:01  akrenek
	build with lb.sever-bones
	
	Revision 1.18  2004/09/29 13:35:39  flammer
	Only update of line formatting.
	
	Revision 1.17  2004/09/09 21:05:29  dimeglio
	Moved tag target to targets-common
	
	Revision 1.16  2004/08/27 03:03:12  dimeglio
	Preserve original timestamp when copying file and overwrite when new
	
	Revision 1.15  2004/08/27 02:46:52  dimeglio
	Added logic to create the tagged dependencies properties file
	
	Revision 1.14  2004/08/26 23:48:26  dimeglio
	Added generation of cruisecontrol config file entry
	
	Revision 1.13  2004/08/09 04:56:14  dimeglio
	Replaced rtag with tag
	
	Revision 1.12  2004/08/09 04:36:44  dimeglio
	Fixed inheritance of do.cvs.tag property
	
	Revision 1.11  2004/08/09 03:06:11  dimeglio
	Fixed inheritance of failonerror property
	
	Revision 1.10  2004/08/09 02:35:35  dimeglio
	Set default value for failonerror
	
	Revision 1.9  2004/08/08 19:07:17  dimeglio
	Added small.memory type of build
	
	Revision 1.8  2004/07/29 10:47:46  dimeglio
	Added server and logger
	
	Revision 1.7  2004/07/29 07:39:57  dimeglio
	Removed local envinfo and envcheck target (must use common ones)
	
	Revision 1.6  2004/07/16 16:25:43  flammer
	Added tags for automated adding of components.
	
	Revision 1.5  2004/07/06 17:43:33  flammer
	Update of classpath definitions, targets & configure file.
	
	Revision 1.4  2004/06/23 00:24:03  dimeglio
	Added common and client modules
	
	Revision 1.3  2004/06/22 18:24:35  dimeglio
	Added client interface module
	
	Revision 1.2  2004/06/18 23:05:12  dimeglio
	Added/upgraded default build scripts
	
-->

<project name="lb" default="dist">

	<description>
		Ant build file to build the GLite Logging and Bookkeping Subsystem
	</description>
		
	<!-- =========================================
		 Builds the GLite LB subsystem
	     ========================================= -->

	<!-- Import baseline & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- Import subsystem build properties, 
	                      subsystem properties & 
	                      subsystem common properties -->
	<import file="./project/properties.xml" />

	<!-- Import global build properties and global properties -->
	<import file="${global.properties.file}" />
				
	<!-- =========================================
		 Load dependencies properties files (order is important) 
	     ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${subsystem.dependencies.file}"/>
	<property file="${global.dependencies.file}"/>	

	<!-- =========================================
                 Load configure options
             ========================================= -->
        <import file="${global.configure.options.file}"/>
			
	<!-- =========================================
		 Import global task definitions
	     ========================================= -->
	<import file="${global.taskdefs.file}" />
	
	<!-- =========================================
	     Import global compiler definitions
  	     ========================================= -->
	<import file="${global.compilerdefs.file}" />
		
	<!-- =========================================
		 Import targets 
	     ========================================= -->
	<import file="${global.targets-common.file}"/>
	
	<!-- =========================================
		 Load version file 
	     ========================================= -->
	<property file="${module.version.file}"/>
			
	<!-- ===============================================
		  Public common targets
	     =============================================== -->

	<target name="localinit" depends="envcheck">

		<echo> Preparing directories ... </echo>
		
		<mkdir dir="${stage.bin.dir}" />
		<mkdir dir="${stage.lib.dir}" />
		<mkdir dir="${stage.java.dir}" />
		<mkdir dir="${stage.inc.dir}" />
		<mkdir dir="${stage.int.dir}" />

		<mkdir dir="${dist.dir}" />

	</target>

	<target name="init" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="init"/>
		</antcall>
	</target>

	<target name="checkstyle" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="checkstyle"/>
		</antcall>
	</target>

	<target name="compile" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compile"/>
		</antcall>
	</target>

	<target name="compiletest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compiletest"/>
		</antcall>
	</target>

	<target name="unittest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unittest"/>
		</antcall>
	</target>

	<target name="unitcoverage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unitcoverage"/>
		</antcall>
	</target>

	<target name="stage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="stage"/>
		</antcall>
	</target>

	<target name="dist" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="dist"/>
		</antcall>
	</target>

	<target name="install" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="install"/>
		</antcall>
	</target>

	<target name="doc" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="doc"/>
		</antcall>
	</target>

	<target name="all" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="all"/>
		</antcall>
	</target>

	<target name="clean" depends="envcheck">

		<property name="offline.repository" value="true" />
		<antcall target="buildmodules">
			<param name="target" value="clean"/>
		</antcall>

		<delete dir="${module.bin.dir}" />
		<delete dir="${module.lib.dir}" />
		<delete dir="${module.autosrc.dir}" />
		<delete dir="${module.autodoc.dir}" />
		<delete dir="${module.test.reports.dir}" />

	</target>

	<target name="cleanAll" depends="clean"/>

	<!-- ===============================================
		 Private targets
	     =============================================== -->

	<!-- ===============================================
		 Modules proxy targets
	     =============================================== -->

	<!-- component targets definitions tag = do not remove = -->

	<target name="client-interface" unless="setenvonly">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb.subsystem.dir}.client-interface" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}.client-interface"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="server-bones" unless="setenvonly">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb.subsystem.dir}.server-bones" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}.server-bones"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="common" unless="setenvonly" depends="globus,expat,ares,client-interface">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb.subsystem.dir}.common" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}.common"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="client" unless="setenvonly" depends="globus,expat,ares,client-interface,common">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb.subsystem.dir}.client" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}.client"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="server" unless="setenvonly" depends="globus,expat,ares,mysql,gsoap,client-interface,common,logger">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb.subsystem.dir}.server" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}.server"
                        	     target="${target}"
                        	     inheritall="false" />
			</else>
		</if>
	</target>

	<target name="logger" unless="setenvonly" depends="globus,expat,ares,client-interface,common">
		<if>
			<isset property="small.memory" />
			<then>
				<exec dir="${lb.subsystem.dir}.logger" executable="${antExec}" failonerror="${failonerror}">
					<arg line="${target} -Dsmall.memory=true -Dbootstrap=${bootstrap} -Dfailonerror=${failonerror} -Ddo.cvs.tag=${do.cvs.tag}"/>
				</exec>
			</then>
			<else>
				<ant dir="${lb.subsystem.dir}.logger"
	                    	     target="${target}"
	                    	     inheritall="false" />
			</else>
		</if>
	</target>

	<!-- Main proxy -->
	<target name="buildmodules" depends="client-interface,
					     client,
					     server-bones,
					     common,
					     server,
					     logger">
		<echo append="true" file="${global.project.dir}/cruisecontrol-stub.xml">
	&lt;project name="${subsystem.name}" type="post-subsystem" packageName="${global.prefix}-${subsystem.prefix}"/&gt;
		</echo>
	</target>

</project>
