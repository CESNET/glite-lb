<?xml version="1.0" encoding="UTF-8" ?>
<!--
	Copyright (c) 2004 on behalf of the EU EGEE Project: 
	The European Organization for Nuclear Research (CERN), 
	Istituto Nazionale di Fisica Nucleare (INFN), Italy
	Datamat Spa, Italy
	Centre National de la Recherche Scientifique (CNRS), France
	CS Systeme d'Information (CSSI), France
	Royal Institute of Technology, Center for Parallel Computers (KTH-PDC), Sweden
	Universiteit van Amsterdam (UvA), Netherlands
	University of Helsinki (UH.HIP), Finland
	University of Bergen (UiB), Norway
	Council for the Central Laboratory of the Research Councils (CCLRC), United Kingdom

	Build file for the GLite Middleware Loggin and Bookkeeping Subsystem
	
	Authors: Ales Krenek <ljocha@ics.muni.cz>
	Version info: $Id$
	Release: $Name$

	Revision history:
	$Log$
	Revision 1.5  2004/07/06 17:43:33  flammer
	Update of classpath definitions, targets & configure file.
	
	Revision 1.4  2004/06/23 00:24:03  dimeglio
	Added common and client modules
	
	Revision 1.3  2004/06/22 18:24:35  dimeglio
	Added client interface module
	
	Revision 1.2  2004/06/18 23:05:12  dimeglio
	Added/upgraded default build scripts
	
-->

<project name="lb" default="dist">

	<description>
		Ant build file to build the GLite Logging and Bookkeping Subsystem
	</description>
		
	<!-- =========================================
		 Builds the GLite LB subsystem
	     ========================================= -->

	<!-- Import baseline & user properties -->
	<import file="../org.glite/project/baseline.properties.xml" />

	<!-- Import subsystem build properties, 
	                      subsystem properties & 
	                      subsystem common properties -->
	<import file="./project/properties.xml" />

	<!-- Import global build properties and global properties -->
	<import file="${global.properties.file}" />
				
	<!-- =========================================
		 Load dependencies properties files (order is important) 
	     ========================================= -->
	<property file="${user.dependencies.file}"/>
	<property file="${subsystem.dependencies.file}"/>
	<property file="${global.dependencies.file}"/>	

	<!-- =========================================
                 Load configure options
             ========================================= -->
        <import file="${global.configure.options.file}"/>
			
	<!-- =========================================
		 Import global task definitions
	     ========================================= -->
	<import file="${global.taskdefs.file}" />
	
	<!-- =========================================
	     Import global compiler definitions
  	     ========================================= -->
	<import file="${global.compilerdefs.file}" />
		
	<!-- =========================================
		 Import targets 
	     ========================================= -->
	<import file="${global.targets-common.file}"/>
	
	<!-- =========================================
		 Load version file 
	     ========================================= -->
	<property file="${module.version.file}"/>
		
	
	<!-- ===============================================
		  Public common targets
	     =============================================== -->

	<target name="envinfo">
		<!-- Workspace paths -->
		<echo>*****************************************************************</echo>
		<echo>*****************************************************************</echo>
		<echo>****** ${subsystem.name}	</echo>
		<echo>*****************************************************************</echo>
		<echo>*****************************************************************</echo>
		<echo>  </echo>
		<echo>Global project path:	${global.dir}</echo>
		<echo>Global project name:	${global.name}</echo>
		<echo>Subsystem name:		${subsystem.name}</echo>
	</target>

	<target name="envcheck" depends="envinfo,defaultenvchecks" 
		description="Check environment configuration">
	</target>

	<target name="localinit" depends="envcheck">

		<echo> Preparing directories ... </echo>
		
		<mkdir dir="${stage.bin.dir}" />
		<mkdir dir="${stage.lib.dir}" />
		<mkdir dir="${stage.java.dir}" />
		<mkdir dir="${stage.inc.dir}" />
		<mkdir dir="${stage.int.dir}" />

		<mkdir dir="${dist.dir}" />

	</target>

	<target name="init" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="init"/>
		</antcall>
	</target>

	<target name="checkstyle" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="checkstyle"/>
		</antcall>
	</target>

	<target name="compile" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compile"/>
		</antcall>
	</target>

	<target name="compiletest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="compiletest"/>
		</antcall>
	</target>

	<target name="unittest" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unittest"/>
		</antcall>
	</target>

	<target name="unitcoverage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="unitcoverage"/>
		</antcall>
	</target>

	<target name="stage" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="stage"/>
		</antcall>
	</target>

	<target name="dist" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="dist"/>
		</antcall>
	</target>

	<target name="install" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="install"/>
		</antcall>
	</target>

	<target name="doc" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="doc"/>
		</antcall>
	</target>

	<target name="tag">

		<!-- This target is not recursive
			 It is only used to set private tags
			 Tagging is done by the build system -->
		<!-- TODO -->		

	</target>

	<target name="all" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="all"/>
		</antcall>
	</target>

	<target name="clean">

		<property name="offline.repository" value="true" />
		<antcall target="buildmodules">
			<param name="target" value="clean"/>
		</antcall>

		<delete dir="${module.bin.dir}" />
		<delete dir="${module.lib.dir}" />
		<delete dir="${module.autosrc.dir}" />
		<delete dir="${module.autodoc.dir}" />
		<delete dir="${module.test.reports.dir}" />

	</target>

	<target name="cleanAll" depends="localinit">
		<antcall target="buildmodules">
			<param name="target" value="cleanAll"/>
		</antcall>
	</target>

	<!-- ===============================================
		 Private targets
	     =============================================== -->

	<!-- ===============================================
		 Modules proxy targets
	     =============================================== -->

	<!-- component targets definitions tag = do not remove = -->

	<target name="client-interface" unless="setenvonly">
		<ant dir="${workspace.dir}/${subsystem.name}.client-interface"
		     target="${target}"
		     inheritall="false" />
	</target>

	<target name="common" unless="setenvonly" depends="globus,expat,ares,client-interface">
		<ant dir="${workspace.dir}/${subsystem.name}.common"
		     target="${target}"
		     inheritall="false" />
	</target>

	<target name="client" unless="setenvonly" depends="globus,expat,ares,client-interface,common">
		<ant dir="${workspace.dir}/${subsystem.name}.client"
		     target="${target}"
		     inheritall="false" />
	</target>

		<!-- Main proxy -->
	<target name="buildmodules" depends="client-interface,
										 client,
										 common"/>

</project>
