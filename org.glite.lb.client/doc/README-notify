LB notifications
----------------

LB infrastructure enables its users to be notified when something interesting happens on a LB server (typically job status change). It enables the user not to poll LB server periodically to find out whatever he/she is interesting in but confortable wait and let the server itself inform you. If user wants to receive the notifications, he/she must first register to the LB notification infarastructure.

User registers via some notification client. (program that uses LB client API to handle notifications). He/she  must specify a condition under which the notification is sent. For example - job XY reaches status DONE. Currently, one or more JOBID's are required in the condition and only a single occurence of a specific attribute is allowed among ANDed conditions. The condition is then delivered to LB server where it is stored. At the same time, server generates an unique notification ID for such registration and returns it to the user.

The registration exists only for limited amount of time. The validity is returned by LB server together with notification ID when registering. During this period user can attach to server and receive notifications, change conditions which triger notification, prolong validity of the registration, or remove the registration from LB server. For all such operation you have to supply the notification ID.


While the registration is valid, user is able repeatable connect to LB server from different places in the net and continue receiving notifications associated with given notification ID. Notifications generated during the time you are not receiving them are stored and waiting when you reconnect. When you reconnect from another place (another IP or PORT), you will receive all not delivered notifications and continue receiving new ones.


How does it work?
-----------------

The request for notification is delivered to LB server. The notification condition specified in the request is stored in LB database and whenever a new event arrives to the LB server, all notification conditions are tested. Always when some of them is true, corresponding notification is sent.

For a notification delivery, a special deamon, a notification interlogger is used. It stores notifications in files and periodically tries to deliver them to the adress of the last connection of notification client. If the user changes the place (IP or PORT) where the client listens, LB server instuct the notification deamon to change delivery destination of all pending notifications. 



Notification example
--------------------

In the next steps, you will be instucted how to register for a notification and how to triger this registration on the LB server in order to receive registration. Our example program 'glite-lb-notify' is used as a notification client here. It uses mentioned client API calls to manipulate with registrations. 


1) Register a job
	export EDG_WL_LOG_DESTINATION=HOSTNAME:9002 
	./glite-lb-job_reg -m HOSTNAME:9000 -s UserInterface

	-> returns JOBID - used in the next steps
	This creates a new job with status submitted.


2) Register notification
	export EDG_WL_NOTIF_SERVER=HOSTNAME:9000
	./glite-lb-notify test JOBID


3) Change status of your job
	export EDG_WL_LOG_DESTINATION=HOSTNAME:9002
	./glite-lb-running.sh -j JOBID


4) Watch incomming notifications. 
	You should receive several notification, each correspondig 
	with job status change.



When you let notification client running several minutes without any incomming notification, it will finish and remove your registration from the server automatically. 
