<?xml version="1.0"?>

<service name="LoggingAndBookkeeping"
	ns="http://glite.org/wsdl/services/lb"
	prefix="lb"
	typeNs="http://glite.org/wsdl/types/lb"
	typePrefix="lbt"
	elemNs="http://glite.org/wsdl/elements/lb"
	elemPrefix="lbe">

	<version>CVS revision: <![CDATA[ $Header$ ]]> </version>

	<doc>
	<para>Logging and Bookkeeping (L&amp;B) service keeps track of grid jobs.</para>

	<para>The service receives job events
	from various components of the Workload Management System, stores
	them, and derives then the corresponding job states.</para>
	
	<para>Job information is fed into LB through a logging interface
	(<ulink url="https://edms.cern.ch/file/571273/1/LB-guide.pdf">legacy C and shell API</ulink>)
	and it is not exposed as a web service yet.</para>

	<para>The users may query job states or retrieve LB events either via the same C/C++
	interface or via this web-service interface.</para>

	<para>Besides querying for the job state actively the user may also register for
	receiving notifications on particular job state changes.
	This functionality is supported only in the legacy C/C++ interface.</para>
	</doc>

	<import namespace="http://glite.org/wsdl/services/lb" location="LBTypes.wsdl"/>

	<fault name="genericFault"/>

	<operations>
		<op name="GetVersion">
			Return version of the service.
			<input name="dummy" type="xsd:string" optional="yes">Dummy parameter (workaround for gSoap).</input>
			<output name="version" type="xsd:string">Returned version.</output>
			<fault name="genericFault" type="genericFault"> Any error. </fault>
		</op>
		<op name="JobStatus">
			Query state of a single job.
			<input name="jobid" type="xsd:string"> Id of the queried job. </input>
			<input name="flags" type="jobFlags"> Which data fields to retrieve. </input>
			<output name="stat" type="jobStatus"> Current state of the job. </output>
			<fault name="genericFault" type="genericFault"> Any error. </fault>
		</op>
		<op name="UserJobs">
			Simplified query, return all jobs of the authenticated user.
			<output name="jobs" type="xsd:string" list="yes"> JobId's of jobs matching the query.</output>
			<output name="states" type="jobStatus" list="yes"> States of jobs matching the query.</output>
			<fault name="genericFault" type="genericFault"> Any error. </fault>
		</op>
		<op name="QueryJobs">
			Retrieve a list of jobs, including their states, based on query conditions.
			The conditions take the form of a list of lists.
			Elements of the inner lists refer to a single job attribute, the conditions are or-ed.
			Elements of the outer list may refer to different job attributes, they are and-ed.

			<input name="conditions" type="queryConditions" list="yes">The query conditions.</input>
			<input name="flags" type="jobFlags"> Which data fields to retrieve.</input>
			<output name="jobs" type="xsd:string" list="yes"> JobId's of jobs matching the query.</output>
			<output name="states" type="jobStatus" list="yes"> States of jobs matching the query.</output>
			<fault name="genericFault" type="genericFault"> Any error. </fault>
		</op>

		<op name="QueryEvents">
			Retrieve events matching a query.
			There are two sets of conditions, on jobs and on individual events, both have to be satisfied.
			Both query conditions have the same format as in QueryJobs.

			<input name="jobConditions" type="queryConditions" list="yes">
				Conditions on jobs.
			</input>
			<input name="eventConditions" type="queryConditions" list="yes">
				Conditions on individual events.
			</input>
			<output name="events" type="event" list="yes">All matchin events.</output>
			<fault name="genericFault" type="genericFault"> Any error. </fault>
		</op>

		<op name="NotifNew">
			<input name="notifId" type="xsd:string"/>
			<input name="destination" type="xsd:string"/>
			<input name="conditions" type="queryConditions" list="yes"/>
			<input name="flags" type="jobFlags"/>
			<input name="valid" type="xsd:dateTime" optional="yes"/>
			<output name="valid" type="xsd:dateTime"/>
			<fault name="genericFault" type="genericFault"/>
		</op>


		<!-- TODO: event queries -->

	</operations>

</service>
