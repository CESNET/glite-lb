In this file, you can find several examples how to set the query conditions.

All user's jobs:
----------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[2];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All user's jobs that are curently running:
------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[3];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[1].value.i = EDG_WLL_JOB_RUNNING;
  jc[2].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All user's jobs running at CE XYZ:
----------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[4];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[1].value.i = EDG_WLL_JOB_RUNNING;
  jc[2].attr = EDG_WLL_QUERY_ATTR_DESTINATION;
  jc[2].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2].value.c = "XYZ";
  jc[3].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All user's jobs that have returned an exit code from 2 to 7:
------------------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[4];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[1].value.i = EDG_WLL_JOB_DONE;
  jc[2].attr = EDG_WLL_QUERY_ATTR_EXITCODE;
  jc[2].op = EDG_WLL_QUERY_OP_WITHIN;
  jc[2].value.i = 2;
  jc[2].value2.i = 7;
  jc[3].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All user's jobs running at CE XXX or YYY:
-----------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    *jc[4];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0] = (edg_wll_QueryRec *) malloc(2*sizeof(edg_wll_QueryRec));
  jc[0][0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0][0].value.c = NULL;
  jc[0][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  jc[1] = (edg_wll_QueryRec *) malloc(2*sizeof(edg_wll_QueryRec));
  jc[1][0].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[1][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[1][0].value.i = EDG_WLL_JOB_RUNNING;
  jc[1][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  jc[2] = (edg_wll_QueryRec *) malloc(3*sizeof(edg_wll_QueryRec));
  jc[2][0].attr = EDG_WLL_QUERY_ATTR_DESTINATION;
  jc[2][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2][0].value.c = "XXX";
  jc[2][1].attr = EDG_WLL_QUERY_ATTR_DESTINATION;
  jc[2][1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2][1].value.c = "YYY";
  jc[2][2].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  jc[3] = NULL;
  edg_wll_QueryJobsExt(ctx, (const edg_wll_QueryRec **)jc, 0, &jobsOut, &statesOut);
  free(jc[0]); free(jc[1]); free(jc[2]);
  ...


All user's jobs marked with the user tag 'color' and with its value 'red':
--------------------------------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[2];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].attr_id.tag = "color";
  jc[0].value.c = "red";
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All user's jobs marked with the user tag 'color' and with its value 'red' or 'green':
-------------------------------------------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[1][3];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0][0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[0][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0][0].attr_id.tag = "color";
  jc[0][0].value.c = "red";
  jc[0][1].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[0][1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0][1].attr_id.tag = "color";
  jc[0][1].value.c = "green";
  jc[0][2].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobsExt(ctx, (const edg_wll_QueryRec **)jc, 0, &jobsOut, &statesOut);
  ...


All user's jobs marked with red color and using the 'xyz' algorithm:
--------------------------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[2];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].attr_id.tag = "color";
  jc[0].value.c = "red";
  jc[1].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[1].attr_id.tag = "algorithm";
  jc[1].value.c = "xyz";
  jc[2].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All jobs that were submitted in the last 24 hours:
--------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[2];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_TIME;
  jc[0].op = EDG_WLL_QUERY_OP_GREATER;
  jc[0].attr_id.state = EDG_WLL_JOB_SUBMITTED;
  jc[0].value.t.tv_sec = time_now - (24 * 60 * 60);
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


All jobs with a specified state within a particular time interval:
------------------------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_QueryRec    jc[3];
  edg_wll_JobStat    *statesOut = NULL;
  edg_wlc_JobId      *jobsOut = NULL;
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_TIME;
  jc[1].op = EDG_WLL_QUERY_OP_WITHIN;
  jc[1].attr_id.state = EDG_WLL_JOB_SUBMITTED;
  jc[1].value.t.tv_sec = time_now - (48 * 60 * 60);
  jc[1].value2.t.tv_sec = time_now - (24 * 60 * 60);
  jc[2].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryJobs(ctx, jc, 0, &jobsOut, &statesOut);
  ...


\label{ASQ}
Event queries and job queries are similar.
Obviously, the return type is different\Dash the \LB\ raw events.
There is one more input parameter
representing specific conditions on events (possibly empty)
in addition to conditions on jobs.
Some examples showing event queries
are considered in the following paragraph.


All events marking any user's job as 'red':
-------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_Event      *eventsOut;
  edg_wll_QueryRec    jc[2];
  edg_wll_QueryRec    ec[2];
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  ec[0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[0].attr_id.tag = "color";
  ec[0].value.c = "red";
  ec[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryEvents(ctx, jc, ec, &eventsOut);
  ...


All events marking red jobs as green:
-------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_Event      *eventsOut;
  edg_wll_QueryRec    jc[2];
  edg_wll_QueryRec    ec[2];
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].attr_id.tag = "color";
  jc[0].value.c = "red";
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  ec[0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[0].attr_id.tag = "color";
  ec[0].value.c = "green";
  ec[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryEvents(ctx, jc, ec, &eventsOut);
  ...


All user's jobs that were resubmitted:
--------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_Event      *eventsOut;
  edg_wll_QueryRec    jc[2];
  edg_wll_QueryRec    ec[2];
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[0].attr = EDG_WLL_QUERY_ATTR_EVENT_TYPE;
  ec[0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[0].value.i = EDG_WLL_EVENT_RESUBMISSION;
  ec[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryEvents(ctx, jc, ec, &eventsOut);
  ...


All user's jobs which were resubmitted in the last 2 hours:
-----------------------------------------------------------

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_Event      *eventsOut;
  edg_wll_QueryRec    jc[2];
  edg_wll_QueryRec    ec[3];
  ...
  jc[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0].value.c = NULL;
  jc[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[0].attr = EDG_WLL_QUERY_ATTR_EVENT_TYPE;
  ec[0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[0].value.i = EDG_WLL_EVENT_RESUBMISSION;
  ec[1].attr = EDG_WLL_QUERY_ATTR_TIME;
  ec[1].op = EDG_WLL_QUERY_OP_GREATER;
  ec[1].value.t.tv_sec = time_now - (2 * 60 * 60);
  ec[2].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  edg_wll_QueryEvents(ctx, jc, ec, &eventsOut);
  ...


Complex query:
--------------
Task: which of my red jobs are heading to a destination 
that already encountered problems executing red jobs?

1. First we retrieve the information of red jobs failures.

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context    ctx;
  edg_wll_QueryRec   jc1[3],ec1[3];
  edg_wll_Event     *failures;

  jc1[0].attr = EDG_WLL_QUERY_ATTR_OWNER;
  jc1[0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc1[0].value.c = NULL;
  jc1[1].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc1[1].attr_id.tag = "color";
  jc1[1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc1[1].value.c = "red";
  jc1[2].attr = EDG_WLL_QUERY_ATTR_DONECODE;
  jc1[2].op = EDG_WLL_QUERY_OP_EQUAL;
  jc1[2].value.i = EDG_WLL_DONE_FAILED;
  jc1[3].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  ec1[0].attr = EDG_WLL_QUERY_ATTR_EVENT_TYPE;
  ec1[0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec1[0].value.i = EDG_WLL_EVENT_DONE;
  ec1[1].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  edg_wll_QueryEvents(ctx,jc1,ec1,&failures);
  ...
\end{verbatim}


2. We loop over the job ID's extracted from the events returned
in the previous step, and retrieve their `Match' and `Done' events.

Note: it is desirable to avoid repeated queries on the same job.

  ...
  edg_wll_QueryRec  *jc2[2],*ec2[2];
  char              *last_job = strdup(""),*this_job,**failed_sites = NULL;
  edg_wll_Event     *match_done;
  char             **failed_sites;
  int                n, i, j;
  ...
  jc2[0][0].attr = EDG_WLL_QUERY_ATTR_JOBID;
  jc2[0][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc2[0][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  jc2[1] = NULL;
  ec2[0][0].attr = EDG_WLL_QUERY_ATTR_EVENT_TYPE;
  ec2[0][0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec2[0][0].value.i = EDG_WLL_EVENT_MATCH;
  ec2[0][1].attr = EDG_WLL_QUERY_ATTR_EVENT_TYPE;
  ec2[0][1].op = EDG_WLL_QUERY_OP_EQUAL;
  ec2[0][1].value.i = EDG_WLL_EVENT_DONE;
  ec2[0][2].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec2[1] = NULL;

  n = 0;
  for (i=0; failures[i].type; i++) {
    this_job = edg_wlc_JobIdUnparse(failures[i].any.jobId);
    if (strcmp(last_job,this_job)) {
      free(last_job);
      last_job = this_job;
      jc2[0][0].value.j = failures[i].any.jobId;
      edg_wll_QueryEventsExt(ctx,(const edg_wll_QueryRec **)jc2,
                             (const edg_wll_QueryRec **)ec2,&match_done);
      for (j=0; match_done[j].type; j++) {
        if (match_done[j].type == EDG_WLL_EVENT_MATCH &&
            match_done[j+1].type == EDG_WLL_EVENT_DONE &&
            match_done[j+1].done.status_code == EDG_WLL_DONE_FAILED)
        {
            failed_sites = realloc(failed_sites,(n+1)*sizeof *failed_sites);
            failed_sites[n++] = strdup(match_done[j].match.dest_id);
        }
        edg_wll_FreeEvent(&match_done[j]);
      }
    }
    else free(this_job);
    edg_wll_FreeEvent(&failures[i]);
  }
  free(failures);
  ...


3. Finally we can query the server for the jobs heading to one of the failing
sites.

  ...
  edg_wll_QueryRec  *jc3[3];
  edg_wlc_JobId     *unlucky_jobs;
  ... /* remove duplicates from failed_sites */

  for (i=0; i<n; i++) {
    jc3[0][i].attr = EDG_WLL_QUERY_ATTR_DESTINATION;
    jc3[0][i].op = EDG_WLL_QUERY_OP_EQUAL;
    jc3[0][i].value.c = failed_sites[i];
  }
  jc3[0][i].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  jc3[1][0].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc3[1][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc3[1][0].value.i = EDG_WLL_JOB_READY;
  jc3[1][1].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc3[1][1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc3[1][1].value.i = EDG_WLL_JOB_SCHEDULED;
  jc3[1][2].attr = EDG_WLL_QUERY_ATTR_UNDEF;

  jc3[2] = NULL;
  edg_wll_QueryJobsExt(ctx,(const edg_wll_QueryRec **)jc3,0,&unlucky_jobs,NULL);
  ...

See also complex example in client module, file query_ext.c.


Complex query:
--------------
Task: Get all red jobs routed to destination X on which were already some
red jobs, but they have failed.

  #include <glite/lb/consumer.h>
  ...
  edg_wll_Context     ctx;
  edg_wll_Event      *eventsOut;
  edg_wll_JobStat    *statesOut;
  edg_wlc_JobId      *jobsOut;
  edg_wll_QueryRec  **jc;
  edg_wll_QueryRec  **ec;
  ...
  jc[0][0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  jc[0][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[0][0].attr_id.tag = "color";
  jc[0][0].value.c = "red";
  jc[0][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  jc[2][0].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[2][0].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2][0].value.i = EDG_WLL_JOB_SUBMITTED;
  jc[2][1].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[2][1].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2][1].value.i = EDG_WLL_JOB_WAITING;
  jc[2][2].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[2][2].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2][2].value.i = EDG_WLL_JOB_READY;
  jc[2][3].attr = EDG_WLL_QUERY_ATTR_STATUS;
  jc[2][3].op = EDG_WLL_QUERY_OP_EQUAL;
  jc[2][3].value.i = EDG_WLL_JOB_SCHEDULED;
  jc[2][4].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  jc[3] = NULL;
  edg_wll_QueryJobsExt(ctx, (const edg_wll_QueryRec **)jc, 0, &jobsOut, &statesOut);
  ...

  ...
  ec[0][0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  ec[0][0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[0][0].attr_id.tag = "color";
  ec[0][0].value.c = "red";
  ec[0][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[1][0].attr = EDG_WLL_QUERY_ATTR_USERTAG;
  ec[1][0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[1][0].attr_id.tag = "color";
  ec[1][0].value.c = "red";
  ec[1][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[2][0].attr = EDG_WLL_QUERY_ATTR_EVENT_TYPE;
  ec[2][0].op = EDG_WLL_QUERY_OP_EQUAL;
  ec[2][0].value.i = EDG_WLL_EVENT_DONE;
  ec[2][1].attr = EDG_WLL_QUERY_ATTR_UNDEF;
  ec[3] = NULL;
  edg_wll_QueryEventsExt(ctx, (const edg_wll_QueryRec **)jc, (const edg_wll_QueryRec **)ec, &eventsOut);
  ...


