function config_glite_lb_check(){
  requires $1 MYSQL_PASSWORD INSTALL_ROOT GLITE_LOCATION GLITE_LB_LOCATION GLITE_LB_LOCATION_ETC GLITE_LB_LOCATION_VAR GLITE_USER
}

# check directory existence first
# (most of the dependencies should be in default locations now)
function config_glite_lb_libs_append() {
  prefix="$1"

  if [ x`uname -m` = xx86_64 ]; then
    if [ -d "$prefix/lib64" ]; then
      libarch=lib64
    fi
  fi
  libarch=${libarch:-'lib'}

  if [ -d "$prefix/$libarch" ]; then
    yaimgridpath_append LD_LIBRARY_PATH "$prefix/$libarch"
  fi
}

function config_glite_lb_setenv(){

  yaimgridenv_set GLITE_USER ${GLITE_USER:-glite}
  # Redefine GLITE_HOME_DIR to make sure we retrieve the correct HOME directory of user glite
  GLITE_HOME_DIR=`getent passwd ${GLITE_USER} | cut -d: -f6`
  if [ "x${GLITE_HOME_DIR}" = "x" ]; then
    yaimlog ERROR "The home directory of ${GLITE_USER} doesn't exist. Check whether the user ${GLITE_USER} was properly created"
    exit ${YEX_NOSUCHFILE}
  fi
  yaimgridenv_set GLITE_WMS_QUERY_TIMEOUT "${GLITE_WMS_QUERY_TIMEOUT}"
  yaimgridenv_set GLITE_HOST_CERT ${GLITE_HOME_DIR:-/home/glite}/.certs/hostcert.pem
  yaimgridenv_set GLITE_HOST_KEY ${GLITE_HOME_DIR:-/home/glite}/.certs/hostkey.pem
  yaimgridenv_set X509_CERT_DIR "${X509_CERT_DIR}"
  yaimgridenv_set X509_VOMS_DIR "${X509_VOMS_DIR}"

  yaimgridenv_set GLITE_LB_EXPORT_ENABLED ${GLITE_LB_EXPORT_ENABLED:-false}
  yaimgridenv_set GLITE_LB_EXPORT_PURGE_ARGS "${GLITE_LB_EXPORT_PURGE_ARGS}"
  yaimgridenv_set GLITE_LB_EXPORT_JPPS ${GLITE_LB_EXPORT_JPPS:-}

  yaimgridenv_set GLITE_LB_LOCATION "${GLITE_LB_LOCATION}"
  yaimgridenv_set GLITE_LB_LOCATION_ETC "${GLITE_LB_LOCATION_ETC}"
  yaimgridenv_set GLITE_LB_LOCATION_VAR "${GLITE_LB_LOCATION_VAR}"
  yaimgridenv_set GLITE_JP_LOCATION "${GLITE_JP_LOCATION}"

  yaimgridenv_set GLITE_LB_SERVER_OTHER_OPTIONS "${GLITE_LB_SERVER_OTHER_OPTIONS}"
  yaimgridenv_set GLITE_LB_NOTIF_IL_OTHER_OPTIONS "${GLITE_LB_NOTIF_IL_OTHER_OPTIONS}"
  yaimgridenv_set GLITE_LB_PROXY_IL_OTHER_OPTIONS "${GLITE_LB_PROXY_IL_OTHER_OPTIONS}"

  #
  # default L&B mode (proxy/server/both) according to the node list,
  # admin can specify GLITE_LB_TYPE, the value is overrided as needed
  #
  # behaviour:
  #   LB:       default 'server', no overriding
  #   WMS:      default 'proxy', override to 'both' if needed
  #   WMS & LB: default 'both', override to 'both' if needed
  #
  use_proxy=0
  use_server=0
  case "$NODE_TYPE_LIST" in
    *WMS*) use_proxy=1 ;;
  esac
  case "$NODE_TYPE_LIST" in
    *LB*) use_server=1 ;;
  esac
  if [ "x${GLITE_LB_TYPE}" = "x" ]; then
    # default
    if [ $use_server -eq 1 ]; then
      if [ $use_proxy -eq 1 ]; then
        GLITE_LB_TYPE=both
      else
        GLITE_LB_TYPE=server
      fi
    else
      if [ $use_proxy -eq 1 ]; then
        GLITE_LB_TYPE=proxy
      fi
    fi
  else
    # override if needed
    if [ $use_proxy -eq 1 ]; then
      case "$GLITE_LB_TYPE" in
        *proxy*|*both*)
          ;;
        *)
          yaimlog WARNING "Overriding L&B mode from '$GLITE_LB_TYPE' to 'both'"
          GLITE_LB_TYPE=both
      esac
    fi
  fi
  yaimgridenv_set GLITE_LB_TYPE ${GLITE_LB_TYPE:-server}

  config_glite_lb_libs_append ${INSTALL_ROOT:-'/opt'}/c-ares
  config_glite_lb_libs_append ${INSTALL_ROOT:-'/opt'}/classads
  config_glite_lb_libs_append ${INSTALL_ROOT:-'/opt'}/log4c
  config_glite_lb_libs_append ${INSTALL_ROOT:-'/opt'}/apr-dev
  config_glite_lb_libs_append ${INSTALL_ROOT:-'/opt'}/aprutil-dev
  config_glite_lb_libs_append ${INSTALL_ROOT:-'/opt'}/activemq-cpp-library
}

function config_glite_lb_authz() {
	superusers="$1"
	rtm="$2"

	superusers="`echo \"$superusers\" | tr ',' '\n' | grep -v ^$ | sed 's/\(.*\)/\trule permit {\n\t\tsubject = \"\1\"\n\t}/'`"
	rtm="`echo \"$rtm\" | tr ',' '\n' | grep -v ^$ | sed 's/\(.*\)/\trule permit {\n\t\tsubject = \"\1\"\n\t}/'`"
	authconf="$GLITE_LB_LOCATION_ETC/glite-lb/glite-lb-authz.conf"

	cat <<EOF > "$authconf".new
resource "LB" {

action "ADMIN_ACCESS" {
$superusers
}

action "READ_ALL" {
$rtm
}

action "REGISTER_JOBS" {
        rule permit {
                subject = ".*"
        }
}

action "LOG_WMS_EVENTS" {
	rule permit {
		subject = ".*"
	}
}

action "LOG_CE_EVENTS" {
        rule permit {
                subject = ".*"
        }
}

action "LOG_GENERAL_EVENTS" {
	rule permit {
		subject = ".*"
	}
}

}
EOF
	# something changed
	if test -f "$authconf"; then
		diff -w "$authconf" "$authconf".new >/dev/null
		if test "$?" != "0"; then
			yaimlog WARNING "Original authz configuration moved to '$authconf.yaimorig'"
			mv "$authconf" "$authconf".yaimorig
		fi
	fi

	# superusers file deprecated
	if test -s "${GLITE_LB_LOCATION_ETC}/LB-super-users"; then
		yaimlog WARNING "Found old superusers file '${GLITE_LB_LOCATION_ETC}/LB-super-users', check 'ADMIN_ACCESS' section in glite-lb-authz.conf"
		echo "# deprecated file, replaced by ADMIN_ACCESS action in glite-lb-authz.conf" > "${GLITE_LB_LOCATION_ETC}/LB-super-users.old"
		cat "${GLITE_LB_LOCATION_ETC}/LB-super-users" >> "${GLITE_LB_LOCATION_ETC}/LB-super-users.old"
		rm "${GLITE_LB_LOCATION_ETC}/LB-super-users"
	fi

	mv "$authconf".new "$authconf"
}

function config_glite_lb() {

  #############################################
  #   Logging and Bookkeeping configuration   #
  #############################################
	
  HOSTNAME=`hostname -f`

  yaimlog INFO "Configuring nodes [$NODE_TYPE_LIST], using L&B mode: $GLITE_LB_TYPE"

  # Redefine GLITE_HOME_DIR to make sure we retrieve the correct HOME directory of user glite
  GLITE_HOME_DIR=`getent passwd ${GLITE_USER} | cut -d: -f6`
  if [ "x${GLITE_HOME_DIR}" = "x" ]; then
    yaimlog ERROR "The home directory of ${GLITE_USER} doesn't exist. Check whether the user ${GLITE_USER} was properly created"
    exit ${YEX_NOSUCHFILE}
  fi

  # Let Job Provenance Primary Storage as localhost:8901 in LB startup script.
  # More strict check of GLITE_LB_EXPORT_JPPS variable only here.
  if [ x"$GLITE_LB_EXPORT_ENABLED" = x"true" -a -z "$GLITE_LB_EXPORT_JPPS" ]; then
    yaimlog ABORT "Job Provenance Primary Storage for export not set! (GLITE_LB_EXPORT_JPPS)"
    return 1
  fi

  LB_PURGE="$GLITE_LB_LOCATION/bin/glite-lb-purge"
  if [ ! -x "$LB_PURGE" ]; then
    LB_PURGE="$GLITE_LB_LOCATION/sbin/glite-lb-purge"
  fi
  if [ ! -x "$LB_PURGE" ]; then
    yaimlog ABORT "Purge utility not found! Install glite-lb-utils (or glite-lb-client in older version)"
    return 1
  fi

  chmod og+rx /var/lib/mysql/ 
  chown mysql:mysql /var/run/mysqld/

  # add option  --max_allowed_packet=17M
  if [ ! -f /etc/my.cnf ]; then
    echo "[mysqld]" >> /etc/my.cnf
    echo "max_allowed_packet=17M" >> /etc/my.cnf
  else
    grep "^[mysqld]" /etc/my.cnf > /dev/null
    if [ ! $? = 0 ]; then
      echo "[mysqld]" >> /etc/my.cnf
      echo "max_allowed_packet=17M" >> /etc/my.cnf
    fi
  fi

  # disable network, restart mysql, if needd
  grep "skip-networking" /etc/my.cnf > /dev/null
  if [ ! $? = 0 ]; then
    mv /etc/my.cnf /etc/my.cnf.orig
    sed 's/\[mysqld\]/[mysqld]\nskip-networking/' /etc/my.cnf.orig > /etc/my.cnf
    rm -f /etc/my.cnf.orig
    ps ax | grep -v grep |grep mysqld_safe > /dev/null 2>&1
    if [ $? = 0 ] ; then
      /etc/init.d/mysqld stop
    fi
  fi

  /sbin/chkconfig mysqld on
  ps ax | grep -v grep |grep mysqld_safe > /dev/null 2>&1
  if [ ! $? = 0 ] ; then
    /etc/init.d/mysqld start
    sleep 1
  fi 

  ls /tmp/mysql.sock > /dev/null 2>&1
  if [ ! $? = 0 ]; then
    ln -s /var/lib/mysql/mysql.sock /tmp/mysql.sock
  fi
  
  # set mysql password
  set_mysql_passwd || return 1 # the function uses $MYSQL_PASSWORD

  # Check if database exist
  mysqlshow --password="$MYSQL_PASSWORD" | grep "\<lbserver20\>" > /dev/null 2>&1

  if [ ! $? = 0 ]; then
    mysql -u root --password="$MYSQL_PASSWORD" -e "CREATE DATABASE lbserver20"
    mysql --password="$MYSQL_PASSWORD" lbserver20 < ${GLITE_LB_LOCATION_ETC}/glite-lb/glite-lb-dbsetup.sql
    mysql -u root --password="$MYSQL_PASSWORD" -e "GRANT ALL PRIVILEGES on lbserver20.* to lbserver IDENTIFIED BY '' WITH GRANT OPTION;"
    mysql -u root --password="$MYSQL_PASSWORD" -e "GRANT ALL PRIVILEGES on lbserver20.* to lbserver@'$HOSTNAME' IDENTIFIED BY '' WITH GRANT OPTION;"
    mysql -u root --password="$MYSQL_PASSWORD" -e "GRANT ALL PRIVILEGES on lbserver20.* to lbserver@localhost IDENTIFIED BY '' WITH GRANT OPTION;"
    mysql -u root --password="$MYSQL_PASSWORD" -e "ALTER TABLE short_fields MAX_ROWS=1000000000;" lbserver20
    mysql -u root --password="$MYSQL_PASSWORD" -e "ALTER TABLE long_fields MAX_ROWS=55000000;" lbserver20
    mysql -u root --password="$MYSQL_PASSWORD" -e "ALTER TABLE states MAX_ROWS=9500000;" lbserver20
    mysql -u root --password="$MYSQL_PASSWORD" -e "ALTER TABLE events MAX_ROWS=175000000;" lbserver20
  else
    yaimlog WARNING "Database lbserver20 already exists"
  fi

  # adjust indexes
  # 1) if L&B with local harvester or L&B for Real Time Monitoring ==> lastUpdateTime needed
  # 2) if GLITE_LB_INDEX_OWNER specified ==> create/destroy owner index
  need_reindex=0
  $GLITE_LB_LOCATION/bin/glite-lb-bkindex -d 2>/dev/null | tail -n +3 | head -n -2 | sed 's/\([^,]\)$/\1,/' > /var/tmp/glite-lb-bkindexes.txt
  if [ x"$GLITE_LB_RTM_ENABLED" = x"true" -o x"GLITE_LB_HARVESTER_ENABLED" = x"true" ]; then
    # index for querying older jobs by real time monitor
    grep '\[ type = "system"; name = "lastUpdateTime" \]' /var/tmp/glite-lb-bkindexes.txt >/dev/null
    if [ $? != 0 ]; then
	need_reindex=1
	yaimlog INFO "Index 'lastUpdateTime' will be added"
	echo '[ type = "system"; name = "lastUpdateTime" ],' >> /var/tmp/glite-lb-bkindexes.txt
    fi
  fi
  if [ x"$GLITE_LB_INDEX_OWNER" = x"true" ]; then
    grep 'name = "owner"' /var/tmp/glite-lb-bkindexes.txt >/dev/null
    if [ $? != 0 ]; then
	need_reindex=1
	yaimlog INFO "Index 'owner' will be added"
	echo '[ type = "system"; name = "owner" ],' >> /var/tmp/glite-lb-bkindexes.txt
    fi
  elif [ x"$GLITE_LB_INDEX_OWNER" = x"false" ]; then
    grep 'name = "owner"' /var/tmp/glite-lb-bkindexes.txt >/dev/null
    if [ $? = 0 ]; then
	need_reindex=1
	yaimlog INFO "Index 'owner' will be deleted"
	mv /var/tmp/glite-lb-bkindexes.txt /var/tmp/glite-lb-bkindexes.txt.2
	grep -v 'name = "owner"' /var/tmp/glite-lb-bkindexes.txt.2 > /var/tmp/glite-lb-bkindexes.txt
	rm -f /var/tmp/glite-lb-bkindexes.txt.2
    fi
  fi
  if [ $need_reindex = 1 ]; then
    cat << EOF | $GLITE_LB_LOCATION/bin/glite-lb-bkindex -rv
[
	JobIndices = {
`cat /var/tmp/glite-lb-bkindexes.txt`
	}
]
EOF
  fi
  rm -f /var/tmp/glite-lb-bkindexes.txt

  mkdir -p $GLITE_LB_LOCATION_VAR   # Needed to store PID of LB server 

  chown $GLITE_USER:$GLITE_USER $GLITE_LB_LOCATION_VAR
  chmod 0755 $GLITE_LB_LOCATION_VAR

  mkdir -p $GLITE_HOME_DIR/.certs
  chown $GLITE_USER:$GLITE_USER $GLITE_HOME_DIR/.certs
  chmod 0755 $GLITE_HOME_DIR/.certs
  cp -f /etc/grid-security/hostcert.pem /etc/grid-security/hostkey.pem $GLITE_HOME_DIR/.certs/
  if [ ! $? = 0 ] ; then
    yaimlog WARNING "Please copy host certificate and key into /etc/grid-security and"
    yaimlog WARNING  "  $GLITE_HOME_DIR/.certs/, change the owner of the ones in"
    yaimlog WARNING  "  $GLITE_HOME_DIR/.certs/ to $GLITE_USER"
  fi
  chown $GLITE_USER:$GLITE_USER $GLITE_HOME_DIR/.certs/hostcert.pem $GLITE_HOME_DIR/.certs/hostkey.pem
  chmod 0644 $GLITE_HOME_DIR/.certs/hostcert.pem
  chmod 0400 $GLITE_HOME_DIR/.certs/hostkey.pem

  # Create cron for purging
  mkdir -p /var/log/glite
  logfile=/var/log/glite/glite-lb-purger.log
  if $LB_PURGE --help 2>&1 | grep 'target-runtime' > /dev/null; then
    purge_target_runtime_cmd='export GLITE_LB_PURGE_TARGET_RUNTIME=84600s; '
  fi
  cat << EOF > /etc/cron.d/glite-lb-purge.cron
HOME=/
MAILTO=$SITE_EMAIL

1 1 * * * $GLITE_USER . $GLITE_LOCATION/etc/profile.d/grid-env.sh ; export GLITE_LB_EXPORT_BKSERVER=$HOSTNAME; $purge_target_runtime_cmd/opt/glite/sbin/glite-lb-export.sh >> $logfile 2>&1
EOF

  touch $logfile
  chown $GLITE_USER:$GLITE_USER $logfile

  cat > /etc/logrotate.d/lb-purger <<EOF
$logfile {
    weekly
    compress
    rotate 4
    missingok
}
EOF

  # LCAS plugin
  # config file
  lcas_libarch=lib
  if [ x`uname -m` = xx86_64 ]; then
    if [ -f "$GLITE_LB_LOCATION/lib64/modules/lcas_lb.mod" ]; then
      lcas_libarch=lib64
    fi
  fi
  lcas_plugin="$GLITE_LB_LOCATION/$lcas_libarch/modules/lcas_lb.mod"
  echo "pluginname=\"$lcas_plugin\"" > ${GLITE_LB_LOCATION_ETC}/glite-lb/lcas.db
  # log file
  logfile=/var/log/glite/glite-lb-lcas.log
  touch $logfile
  chown $GLITE_USER:$GLITE_USER $logfile
  cat > /etc/logrotate.d/lb-lcas <<EOF
$logfile {
    daily
    compress
    rotate 4
    missingok
}
EOF

  # Start services
  if [ ! -f @glite_etc@/gLiteservices ] ; then
    touch @glite_etc@/gLiteservices
  fi

  grep glite-lb-bkserverd @glite_etc@/gLiteservices > /dev/null
  if [ ! $? = 0 ] ; then
    echo "${GLITE_LB_LOCATION_ETC}/init.d/glite-lb-bkserverd" >> @glite_etc@/gLiteservices
  fi

  if [ x"$GLITE_LB_RTM_ENABLED" = x"true" ]; then
    config_glite_lb_authz "$GLITE_LB_SUPER_USERS" "$GLITE_LB_RTM_DN"
  else
    config_glite_lb_authz "$GLITE_LB_SUPER_USERS" ""
  fi

  if [ ! -f ${GLITE_LB_LOCATION_ETC}/glite-lb/glite-lb-harvester.conf ]; then
    echo $HOSTNAME > ${GLITE_LB_LOCATION_ETC}/glite-lb/glite-lb-harvester.conf
  fi

  . ${GLITE_LOCATION}/etc/profile.d/grid-env.sh
  ${GLITE_LB_LOCATION_ETC}/init.d/glite-lb-bkserverd stop
  ${GLITE_LB_LOCATION_ETC}/init.d/glite-lb-bkserverd start

  if [ ! $? = 0 ] ; then
    yaimlog ABORT "Service glite-lb-bkserverd failed to start!"
    return 1
  fi

  return 0

}
