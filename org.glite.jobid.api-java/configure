#!/usr/bin/perl

# WARNING: Don't edit this file unless it is the master copy in org.glite.lb
#
# For the purpose of standalone builds of lb/jobid/lbjp-common components
# it is copied on tagging 

# $Header$

use Getopt::Long;

my $pwd = `pwd`; chomp $pwd;
my $prefix = $pwd.'/stage';
my $stagedir;
my $staged;
my $module;
my $thrflavour = 'gcc64dbgpthr';
my $nothrflavour = 'gcc64dbg';
my $mode = 'build';
my $help = 0;
my $listmodules;
my $version;
my $output;
my $lb_tag = '';
my $lbjp_tag = '';
my $sec_tag = '';
my $jobid_tag = '';

my @nodes = qw/client server logger utils client-java doc ws-test/;
my %enable_nodes;
my %disable_nodes;

my %extern_prefix = (
	cares => '/opt/c-ares',
	classads => '/opt/classads',
	cppunit => '/usr',
	expat => '/usr',
	globus => '/opt/globus',
	gsoap => '/usr',
	mysql => '/usr',
	voms => '/opt/glite',
	gridsite => '/opt/glite',
	lcas => '/opt/glite',
	ant => '/usr',
	jdk => '/usr',
);

my %jar = (
	'commons-codec' => '/usr/share/java/commons-codec-1.3.jar',
);


my %glite_prefix;
my %need_externs;
my %need_externs_type;
my %need_jars;
my %extrafull;
my %extranodmod;
my %deps;
my %deps_type;
my %topbuild;

my %lbmodules = (
	'lb' => [ qw/client client-java common doc logger server state-machine types utils ws-interface ws-test/], 
	'security' => [qw/gss gsoap-plugin/],
	'lbjp-common' => [qw/db maildir server-bones trio jp-interface/],
	'jobid' => [qw/api-c api-cpp api-java/],
	);


my @opts = (
	'prefix=s' => \$prefix,
	'staged=s' => \$staged,
	'module=s' => \$module,
	'thrflavour=s' => \$thrflavour,
	'nothrflavour=s' => \$nothrflavour,
	'mode=s' => \$mode,
	'listmodules=s' => \$listmodules,
	'version=s' => \$version,
	'output=s' => \$output,
	'stage=s' => \$stagedir,
	'lb-tag=s' => \$lb_tag,
	'lbjp-common-tag=s' => \$lbjp_tag,
	'security-tag=s' => \$sec_tag,
	'jobid-tag=s' => \$jobid_tag,
	'help' => \$help,
);

for (@nodes) {
	$enable_nodes{$_} = 0;
	$disable_nodes{$_} = 0;
	
	push @opts,"disable-$_",\$disable_nodes{$_};
	push @opts,"enable-$_",\$enable_nodes{$_};
}

push @opts,"with-$_=s",\$extern_prefix{$_} for keys %extern_prefix;
push @opts,"with-$_=s",\$jar{$_} for keys %jar;

my @keeparg = @ARGV;

GetOptions @opts or die "Errors parsing command line\n";

if ($help) { usage(); exit 0; }

if ($listmodules) {
	my @m = map "org.glite.$listmodules.$_",@{$lbmodules{$listmodules}};
	print "@m\n";
	exit 0;
}

warn "$0: --version and --output make sense only in --mode=etics\n"
	if ($version || $output) && $mode ne 'etics';

my $en;
for (keys %enable_nodes) { $en = 1 if $enable_nodes{$_}; }

my $dis;
for (keys %disable_nodes) { $dis = 1 if $disable_nodes{$_}; }

die "--enable-* and --disable-* are mutually exclusive\n"
	if $en && $dis;

die "--module cannot be used with --enable-* or --disable-*\n"
	if $module && ($en || $dis);

die "$module: unknown module\n" if $module && ! grep $module,@{$lbmodules{lb}},@{$lbmodules{security}};

if ($dis) {
	for (@nodes) {
		$enable_nodes{$_} = 1 unless $disable_nodes{$_};
	}
}

if (!$en && !$dis) { $enable_nodes{$_} = 1 for (@nodes) } ;

for (keys %enable_nodes) { delete $enable_nodes{$_} unless $enable_nodes{$_}; }

$stagedir = $prefix unless $stagedir;

if ($mode eq 'build') {
	print "Writing config.status\n";
	open CONF,">config.status" or die "config.status: $!\n";
	print CONF "$0 @keeparg\n";
	close CONF;
}


my @modules;
my %aux;

if ($module) {
	push @modules,$module;
}
else {
	@modules = map 'lb.'.($extranodmod{$_} ? $extranodmod{$_} : $_),keys %enable_nodes;
	
	my $n;

	do {
		local $"="\n";
 		$n = $#modules;
		push @modules,(map @{$deps{$_}},@modules);

		undef %aux; @aux{@modules} = (1) x ($#modules+1);
		@modules = keys %aux;
	} while ($#modules > $n);
}

@aux{@modules} = (1) x ($#modules+1);
delete $aux{$_} for (split /,/,$staged);
@modules = keys %aux;

mode_build() if $mode eq 'build';
mode_checkout() if $mode eq 'checkout';
mode_etics($module) if $mode eq 'etics';

sub mode_build {
	print "\nBuilding modules: @modules\n";
	
	my @ext = map @{$need_externs{$_}},@modules;
	my @myjars = map @{$need_jars{$_}},@modules;
	undef %aux; @aux{@ext} = 1;
	@ext = keys %aux;
	undef %aux; @aux{@myjars} = (1) x ($#myjars+1);
	@myjars = keys %aux;
	
	print "\nRequired externals:\n";
	print "\t$_: $extern_prefix{$_}\n" for @ext;
	print "\t$_: $jar{$_}\n" for @myjars;
	print "\nThis is a poor-man configure, it's up to you to have sources and externals there\n\n";
	
	mkinc($_) for @modules;
	
	print "Creating Makefile\n";
	
	open MAK,">Makefile" or die "Makefile: $!\n";
	
	print MAK "all: @modules\n\nclean:\n";
	
	for (@modules) {
		my $full = full($_);
		my $build = $topbuild{$_} ? '': '/build';
		print MAK "\tcd $full$build && \${MAKE} clean\n"
	}
	
	print MAK "\ndistclean:\n";
	
	for (@modules) {
		my $full = full($_);
		print MAK $topbuild{$_} ?
			"\tcd $full$build && \${MAKE} distclean\n" :
			"\trm -rf $full$build\n"
	}
	
	print MAK "\n";
	
	for (@modules) {
		my %ldeps; undef %ldeps;  
		@ldeps{@{$deps{$_}}} = 1;
		for my $x (split /,/,$staged) { delete $ldeps{$x}; }
		my @dnames = keys %ldeps;
	
		my $full = full($_);
		my $build = $topbuild{$_} ? '': '/build';
	
		print MAK "$_: @dnames\n\tcd $full$build && \${MAKE} && \${MAKE} install\n\n";
	}
	
	close MAK;
}
	
sub mode_checkout() {
	for (@modules) {
		my $module = $_;
		my $tag = "";
		if ($lb_tag){
			for (@{$lbmodules{lb}}){
				if ("lb.".$_ eq $module){
					$tag = '-r '.$lb_tag;
				}
			}	
		}
		if ($lbjp_tag){
			for (@{$lbmodules{'lbjp-common'}}){
				if ("lbjp-common.".$_ eq $module){
                                        $tag = '-r '.$lbjp_tag;
                                }
			}
		}
		if ($sec_tag){
			for (@{$lbmodules{security}}){
				if ("security.".$_ eq $module){
                                        $tag = '-r '.$sec_tag;
                                }
			}
		}
		if ($jobid_tag){
			for (@{$lbmodules{jobid}}){
				if ("jobid.".$_ eq $module){
                                        $tag = '-r '.$jobid_tag;
                                }
			}
		}
		#if (grep {"lb.".$_ eq $module} @{$lbmodules{lb}}){
		#	print "found";
		#}
		$_ = full($_);
		print "\n*** Checking out $_\n";
		system("cvs checkout  $tag $_") == 0 or die "cvs checkout $tag $_: $?\n";
	}
}

BEGIN{
%need_externs_aux = (
	'lb.client' => [ qw/cppunit:B classads/ ],
	'lb.client-java' => [ qw/ant:B/ ],
	'lb.common' => [ qw/expat cppunit:B classads/ ],
	'lb.doc' => [],
	'lb.logger' => [ qw/cppunit:B/ ],
	'lb.server' => [ qw/globus expat cares mysql cppunit:B gsoap:B classads voms lcas gridsite/ ],
	'lb.state-machine' => [ qw/classads/ ],
	'lb.utils' => [ qw/cppunit:B/ ],
	'lb.ws-interface' => [],
	'lb.ws-test' => [ qw/gsoap:B/ ],
	'lb.types' => [ qw// ],
	'lbjp-common.db' => [ qw/mysql/ ],
	'lbjp-common.maildir' => [ qw// ],
	'lbjp-common.server-bones' => [ qw// ],
	'lbjp-common.trio' => [ qw/cppunit:B/ ],
	'lbjp-common.jp-interface' => [ qw/cppunit:B/ ],
	'security.gss' =>  [ qw/globus cares cppunit:B/ ],
	'security.gsoap-plugin' =>  [ qw/cppunit:B globus cares gsoap:B/ ],
	'jobid.api-c' =>  [ qw/cppunit:B/ ],
	'jobid.api-cpp' =>  [ qw/cppunit:B/ ],
	'jobid.api-java' =>  [ qw/ant:B jdk:B/ ],
);

for my $ext (keys %need_externs_aux) {
	for (@{$need_externs_aux{$ext}}) {
		/([^:]*)(?::(.*))?/;
		push @{$need_externs{$ext}},$1;
		my $type = $2 ? $2 : 'BR';
		$need_externs_type{$ext}->{$1} = $type;
	}
}

%need_jars = (
	'jobid.api-java' => [ qw/commons-codec/ ],
);

for my $jar (keys %need_jars) {
	for (@{$need_jars{$jar}}) {
		$need_externs_type{$jar}->{$_} = 'BR'; 	# XXX
	}
}

%deps_aux = (
	'lb.client' => [ qw/
		lb.types:B lb.common
		lbjp-common.trio
		jobid.api-cpp jobid.api-c
		security.gss
	/ ],
	'lb.client-java' => [ qw/
		lb.types:B
		jobid.api-java
	/ ],
	'lb.common' => [ qw/
		jobid.api-cpp jobid.api-c
		lb.types:B lbjp-common.trio security.gss
	/ ],
	'lb.doc' => [ qw/lb.types:B/ ],
	'lb.logger' => [ qw/
		lbjp-common.trio
		jobid.api-c
		lb.common
		security.gss
	/ ],
	'lb.server' => [ qw/
		lb.ws-interface lb.types:B lb.common lb.state-machine
		lbjp-common.db lbjp-common.server-bones lbjp-common.trio lbjp-common.maildir
		jobid.api-c
		security.gsoap-plugin security.gss
	/ ],
	'lb.state-machine' => [ qw/lb.common lbjp-common.jp-interface security.gss/ ],
	'lb.utils' => [ qw/
		lbjp-common.jp-interface
		jobid.api-c
		lbjp-common.trio lbjp-common.maildir
		lb.client lb.state-machine
	/ ],
	'lb.ws-test' => [ qw/security.gsoap-plugin lb.ws-interface/ ],
	'lb.ws-interface' => [ qw/lb.types:B/ ],
	'lb.types' => [ qw// ],
	'lbjp-common.db' => [ qw/lbjp-common.trio/ ],
	'lbjp-common.maildir' => [ qw// ],
	'lbjp-common.server-bones' => [ qw// ],
	'lbjp-common.trio' => [ qw// ],
	'security.gss' =>  [ qw// ],
	'security.gsoap-plugin' =>  [ qw/security.gss/ ],
	'jobid.api-c' =>  [ qw// ],
	'jobid.api-cpp' =>  [ qw/jobid.api-c/ ],
	'jobid.api-java' =>  [ qw// ],

	'lbjp-common.jp-interface' => [ qw/lbjp-common.db jobid.api-c/ ],
);

for my $ext (keys %deps_aux) {
	for (@{$deps_aux{$ext}}) {
		/([^:]*)(?::(.*))?/;
		push @{$deps{$ext}},$1;
		my $type = $2 ? $2 : 'BR';
		$deps_type{$ext}->{$1} = $type;
	}
}


%extrafull = ( gridsite=>'org.gridsite.core');

# %extranodmod = ( java => 'client-java' );

my @t = qw/lb.client-java jobid.api-java lb.types/;
@topbuild{@t} = (1) x ($#t+1);
}

sub full
{
	my $short = shift;
	return $extrafull{$short} ? $extrafull{$short} : 'org.glite.'.$short;
}

sub mkinc
{
	my %aux;
	undef %aux;
	my @m=qw/
lb.client lb.doc lb.state-machine lb.ws-interface lb.logger lb.types lb.common lb.server lb.utils lb.ws-test lb.client-java
security.gss security.gsoap-plugin
jobid.api-c jobid.api-cpp jobid.api-java
lbjp-common.db lbjp-common.maildir lbjp-common.server-bones lbjp-common.trio lbjp-common.jp-interface
/;
	@aux{@m} = (1) x ($#m+1);

	my $short = shift;
	my $full = full $short;

	unless ($aux{$short}) {
		print "Makefile.inc not needed in $full\n";
		return;
	}

	my $build = '';
	
	unless ($topbuild{$_}) {
		$build = '/build';
		unless (-d "$full/build") {
			mkdir "$full/build" or die "mkdir $full/build: $!\n";
		}
		unlink "$full/build/Makefile";
		symlink "../Makefile","$full/build/Makefile" or die "symlink ../Makefile $full/build/Makefile: $!\n";
	}

	open MKINC,">$full$build/Makefile.inc"
		or die "$full$build/Makefile.inc: $!\n";

	print "Creating $full$build/Makefile.inc\n";

	print MKINC qq{
PREFIX = $prefix
stagedir = $stagedir
thrflavour = $thrflavour
nothrflavour = $nothrflavour
};

	for (@{$need_externs{$short}}) {
		print MKINC "${_}_prefix = $extern_prefix{$_}\n"
	}

	for (@{$need_jars{$short}}) {
		print MKINC "${_}_jar = $jar{$_}\n"
	}

	my $need_gsoap = 0;
	for (@{$need_externs{$short}})  { $need_gsoap = 1 if $_ eq 'gsoap'; }

	print MKINC "gsoap_default_version=".gsoap_version()."\n"  if $need_gsoap;

	close MKINC;
}

my %etics_externs;
my %etics_projects;
BEGIN{
	%etics_externs = (
		globus=>'vdt_globus_essentials',
		cares=>'c-ares',
		voms=>'org.glite.security.voms-api-cpp',
		gridsite=>'org.gridsite.shared',
		lcas=>'org.glite.security.lcas',
	);
	%etics_projects = (
		vdt=>[qw/globus/],
		'org.glite'=>[qw/voms gridsite lcas/],
	);
};

sub mode_etics {
	$fmod = shift;

	die "$0: --module required with --etics\n" unless $fmod;
	
	my ($subsys,$module) = split /\./,$fmod;

	my ($major,$minor,$rev,$age);

	if ($version) {
		$version =~ /([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)-(.+)/;
		($major,$minor,$rev,$age) = ($1,$2,$3,$4);
	}
	else { 
		open V,"org.glite.$subsys.$module/project/version.properties"
			or die "org.glite.$subsys.$module/project/version.properties: $!\n";
	
		while ($_ = <V>) {
			chomp;
			($major,$minor,$rev) = ($1,$2,$3) if /module\.version\s*=\s*([[:digit:]]+)\.([[:digit:]]+)\.([[:digit:]]+)/;
			$age = $1 if /module\.age\s*=\s*([[:digit:]]+)/;
		}
		close V;
	}

	my @copts = ();
	my %ge;
	@ge{@{$etics_projects{'org.glite'}}} = (1) x ($#{$etics_projects{'org.glite'}}+1);

	for (@{$need_externs{"$subsys.$module"}}) {
		my $eext = $etics_externs{$_} ? $etics_externs{$_} : $_;
		push @copts,$ge{$_} ? "--with-$_=\${stageDir}" : "--with-$_=\${$eext.location}";
	}

	for (@{$need_jars{"$subsys.$module"}}) {
		my $eext = $etics_externs{$_} ? $etics_externs{$_} : $_;

		push @copts,"--with-$_ \${$eext.location}/$_*.jar";
	}


	my $conf = "glite-$subsys-${module}_R_${major}_${minor}_${rev}_${age}";
	my $file = $output ? $output : "$conf.ini";
	open C,">$file" or die "$file: $!\n";

	my $buildroot = $topbuild{"$subsys.$module"} ? '' : "build.root = build\n";

	my $confdir = $topbuild{"$subsys.$module"} ? '..' : '../..';

	print STDERR "Writing $file\n";
	print C qq{
[Configuration-$conf]
profile = None
moduleName = org.glite.$subsys.$module
displayName = $conf
description = org.glite.$subsys.$module
projectName = org.glite
age = $age
deploymentType = None
tag = $conf
version = $major.$minor.$rev
path = \${projectName}/\${moduleName}/\${version}/\${platformName}/\${packageName}-\${version}-\${age}.tar.gz

[Platform-default:VcsCommand]
displayName = None
description = None
tag = cvs -d \${vcsroot} tag -R \${tag} \${moduleName}
branch = None
commit = None
checkout = cvs -d \${vcsroot} co -r \${tag} \${moduleName}

[Platform-default:BuildCommand]
postpublish = None
packaging = None
displayName = None
description = None
doc = None
prepublish = None
publish = None
compile = make
init = None
install = make install
clean = make clean
test = make check
configure = cd $confdir && \${moduleName}/configure --thrflavour=\${globus.thr.flavor} --nothrflavour=\${globus.nothr.flavor} --prefix=\${prefix} --stage=\${stageDir} --module $subsys.$module @copts
checkstyle = None

[Platform-default:Property]
$buildroot

[Platform-default:DynamicDependency]

};
	for (@{$need_externs{"$subsys.$module"}},@{$need_jars{"$subsys.$module"}}) {
		my $eext = $etics_externs{$_} ? $etics_externs{$_} : $_;

		my $proj = 'externals';
		for my $p (keys %etics_projects) {
			for $m (@{$etics_projects{$p}}) {
				$proj = $p if $m eq $_;
			}
		}

		my $type = $need_externs_type{"$subsys.$module"}->{$_};
		print C "$proj|$eext = $type\n";
	}

	for (@{$deps{"$subsys.$module"}}) {
		my $type = $deps_type{"$subsys.$module"}->{$_};
		print C "org.glite|org.glite.$_ = $type\n";
	}

	close C;
}

sub gsoap_version {
	local $_;
	my $gsoap_version;
	open S,"$extern_prefix{gsoap}/bin/soapcpp2 -v 2>&1 |" or die "$extern_prefix{gsoap}/bin/soapcpp2: $!\n";

	while ($_ = <S>) {
		chomp;

		$gsoap_version = $1 if /The gSOAP Stub and Skeleton Compiler for C and C\+\+ ([.[:digit:][:alpha:]]+)$/;
	}
	close S;
	return $gsoap_version;
}


sub usage {
	my @ext = keys %extern_prefix;
	my @myjars, keys %jar;

	print STDERR qq{
usage: $0 options

General options (defaults in []):
  --prefix=PREFIX		destination directory [./stage]
  --staged=module,module,...	what is already in PREFIX (specify without org.glite.)
  --thrflavour=flavour
  --nothrflavour=flavour	threaded and non-treaded flavours [gcc64dbgpthr,gcc64dbg]
  --listmodules=subsys		list modules of a subsystem
  
Mode of operation:
  --mode={checkout|build|etics}	what to do [build]
  
What to build:
  --module=module		build this module only (mostly in-Etics operation)
  --enable-NODE			build this "node" (set of modules) only. Available nodes are
					@{$lbmodules{lb}},@{$lbmodules{security}}
  --disable-NODE		don't build this node
  --lb-tag=tag			checkout LB modules with specific tag
  --lbjp-common-tag=tag         checkout lbjp-common modules with specific tag
  --security-tag=tag		checkout security modules with specific tag
  --jobid-tag=tag		checkout jobid modules with specific tag

Dependencies:
  --with-EXTERNAL=PATH		where to look for an external. Required externals
 				(not all for all modules) are:
					@ext
  --with-JAR=JAR		where to look for jars. Required jars are:
					@myjars
				Summary of what will be used is always printed

};

}
